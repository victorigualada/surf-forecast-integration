blueprint:
  name: Surf Incoming Notification
  description: Send a notification to your phone when the surf spot binary sensor turns on (good condition met).
  domain: automation
  input:
    surf_spot:
      name: Surf spot device
      description: The spot from Surf Forecast to monitor.
      selector:
        device:
          integration: surf_forecast_integration
    notify_device:
      name: Device to notify
      description: The device to send the notification to
      selector:
        device:
          integration: mobile_app
    sun_condition:
      name: Only notify if surf is during the day
      description: Enable to only send notifications when the desired surf conditions are during the day.
      default: true
      selector:
        boolean:
    title:
      name: Noticiation title
      description: The title of the notification to send.
      default: "SUUUUURFING ALERT!"
    message:
      name: Notification message
      description: The message to send. You can use {spot} and {date} as placeholders.
      default: "🌊🌊🌊<br/><b>&nbsp;&nbsp;📍&nbsp;{spot}</b>!<br/>&nbsp;&nbsp;🗓️&nbsp;{date}<br/>🌊🌊🌊"

trigger_variables:
  surf_device_id: !input surf_spot
  incoming_surf: >-
    {{ device_entities(surf_device_id)
       | select('match', 'binary_sensor')
       | select('search', '_incoming_surf')
       | list
       | first }}
trigger:
  - platform: template
    value_template: >-
      {{ is_state(incoming_surf, 'on') }}

action:
  - variables:
      selected_device: !input notify_device
      selected_device_slug: "{{ device_attr(selected_device, 'name') | slugify }}"
      notify_service: >-
        {{
          integration_entities('mobile_app')
          | select('match', 'device_tracker')
          | map('regex_replace', '^device_tracker\\.', 'notify.mobile_app_')
          | select('search', selected_device_slug)
          | list
          | first
        }}
      selected_spot_device_id: !input surf_spot
      spot: "{{ device_attr(selected_spot_device_id, 'name') | default('Unknown Spot') }}"
      date: "{{ states(device_entities(selected_spot_device_id)  | select('search', '_incoming_surf_date')  | list | first) | as_datetime | as_timestamp | timestamp_custom('%A %d %B %Y %H:%M') }}"
      surf_datetime: >-
        {{ states(device_entities(selected_spot_device_id)
          | select('search', '_incoming_surf_date')
          | list
          | first) | as_datetime }}
      sunrise: "{{ state_attr('sun.sun', 'next_rising') | as_datetime }}"
      dusk: "{{ state_attr('sun.sun', 'next_dusk') | as_datetime }}"
      sun_condition_enabled: !input sun_condition
      message_template: !input message
      msg: >-
        {{
          (message_template
              | replace('{spot}', spot | default('Unknown Spot'))
              | replace('{date}', date | default('Unknown Date'))
          )
        }}
  - if:
      - condition: template
        value_template: >-
          {% set surf_t = (surf_datetime | as_datetime).time() %}
          {% set rise_t = (sunrise | as_datetime).time() %}
          {% set dusk_t = (dusk | as_datetime).time() %}
          {{ not sun_condition_enabled or (surf_t >= rise_t and surf_t <= dusk_t) }}
    then:
      - service: "{{ notify_service }}"
        data:
          title: "SUUUURFING ALERT!"
          message: "{{ msg }}"
          data:
            notification_icon: "mdi:surfing"
            actions:
              - action: "URI"
                title: "Open Surfline"
                uri: "{{ state_attr(device_entities(selected_spot_device_id)  | select('search', '_surf_rating')  | list | first , 'href') }}#forecast"