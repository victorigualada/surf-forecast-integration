blueprint:
  name: Surf Incoming Notification
  description: Send a notification to your phone when the surf spot binary sensor turns on (good condition met).
  domain: automation
  input:
    surf_spot:
      name: Surf spot device
      description: The spot from Surf Forecast to monitor.
      selector:
        device:
          integration: surf_forecast
    notify_device:
      name: Device to notify
      description: The device to send the notification to
      selector:
        device:
          integration: mobile_app
    title:
      name: Noticiation title
      description: The title of the notification to send.
      default: "SUUUUURFING ALERT!"
    message:
      name: Notification message
      description: The message to send. You can use {spot} and {date} as placeholders.
      default: "üåäüåäüåä<br/><b>&nbsp;&nbsp;üìç&nbsp;{spot}</b>!<br/>&nbsp;&nbsp;üóìÔ∏è&nbsp;{date}<br/>üåäüåäüåä"

trigger_variables:
  surf_device_id: !input surf_spot
  incoming_surf: >-
    {{ device_entities(surf_device_id)
       | select('match', 'binary_sensor')
       | select('search', '_incoming_surf')
       | list
       | first }}
trigger:
  - platform: template
    value_template: >-
      {{ is_state(incoming_surf, 'on') }}

action:
  - variables:
      selected_device: !input notify_device
      selected_device_slug: "{{ device_attr(selected_device, 'name') | slugify }}"
      notify_services: >-
        {{
          integration_entities('mobile_app')
          | select('match', 'device_tracker')
          | map('regex_replace', '^device_tracker\\.', 'notify.mobile_app_')
          | select('search', selected_device_slug)
          | list
        }}
      selected_spot_device_id: !input surf_spot
      spot: "{{ device_attr(selected_spot_device_id, 'name') | default('Unknown Spot') }}"
      date: "{{ states(device_entities(selected_spot_device_id)  | select('search', '_incoming_surf_date')  | list | first) | as_datetime | as_timestamp | timestamp_custom('%A %d %B %Y %H:%M') }}"
      message_template: !input message
      msg: >-
        {{
          (message_template
              | replace('{spot}', spot | default('Unknown Spot'))
              | replace('{date}', date | default('Unknown Date'))
          )
        }}
  - choose:
      - conditions: "{{ notify_services | length > 0 }}"
        sequence:
          - service: "{{ notify_services[0] }}"
            data:
              title: "SUUUURFING ALERT!"
              message: "{{ msg }}"
              data:
                notification_icon: "mdi:surfing"
                actions:
                  - action: "URI"
                    title: "Open Surfline"
                    uri: "{{ state_attr(device_entities(selected_spot_device_id)  | select('search', '_surf_rating')  | list | first , 'href') }}#forecast"
    default:
      - service: persistent_notification.create
        data:
          title: "Notification Error"
          message: "No valid notify service found for the selected device. {{ selected_device_slug }}"